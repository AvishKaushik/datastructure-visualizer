[{"D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\index.js":"1","D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\reportWebVitals.js":"2","D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\App.js":"3","D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\DataStructuresVisualizer\\DataStructuresVisualizer.jsx":"4","D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\DataStructuresVisualizer\\Notification.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":343,"mtime":1609246271085,"results":"9","hashOfConfig":"7"},{"size":13003,"mtime":1609247691088,"results":"10","hashOfConfig":"7"},{"size":43745,"mtime":1601725174000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"8bh6c0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24"},"D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\index.js",[],["25","26"],"D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\reportWebVitals.js",[],"D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\App.js",[],"D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\DataStructuresVisualizer\\DataStructuresVisualizer.jsx",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68"],"import React , {Component} from 'react';\r\nimport './DataStructuresVisualizer.css';\r\nimport Notification from './Notification.js';\r\nimport './notification.min.css';\r\n\r\n\r\nexport default class DataStructuresVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      abar: '2',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    this.state.abar=parseInt(2);\r\n    if(this.refs.dsType.value===\"SortedSet\")\r\n    {\r\n      for ( let i=0;i<this.state.abar;) {\r\n        var o=randomIntFromInterval(14,650);\r\n        if(array.includes(parseInt(o)))\r\n        {\r\n          continue;\r\n        }\r\n        else\r\n        {\r\n          array.push(parseInt(o));\r\n          i++;\r\n        }\r\n      }\r\n      array.sort(function(a, b){return a-b});\r\n    }\r\n    else\r\n    {\r\n      for ( let i=0;i<this.state.abar;i++) {\r\n        array.push(randomIntFromInterval(14,650));\r\n      }\r\n    }\r\n    this.setState({array});\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteValue() {\r\n    const array=[];\r\n    var x=document.getElementById(\"dval\").value;\r\n    if(this.state.abar===0)\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'error',\r\n      title: 'Buffer Underflow',\r\n      message: 'List is already empty',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    else if(x===\"\")\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'warning',\r\n      title: 'No Input',\r\n      message: 'Provide some input please',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    else if(!this.state.array.includes(parseInt(x)))\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'warning',\r\n      title: '404 Not Found',\r\n      message: 'The value to be deleted is not available',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    for ( let i=0;i<this.state.abar;i++) {\r\n      if(this.state.array[i]===parseInt(x))\r\n      {\r\n        continue;\r\n      }\r\n      array.push(this.state.array[i]);\r\n      console.log(array[i]);\r\n    }\r\n    this.state.abar=parseInt(this.state.abar)-parseInt(1);\r\n    this.setState({array});\r\n    console.log(this.state.abar);\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n  }\r\n\r\n  pop() {\r\n    const array=[];\r\n    if(this.state.abar===0)\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'error',\r\n      title: 'Buffer Underflow',\r\n      message: 'List is already empty',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    for ( let i=0;i<this.state.abar-1;i++) {\r\n      array.push(this.state.array[i]);\r\n      console.log(array[i]);\r\n    }\r\n    this.state.abar=parseInt(this.state.abar)-parseInt(1);\r\n    this.setState({array});\r\n    console.log(this.state.abar);\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n    \r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'success',\r\n      title: 'Task Successful',\r\n      message: 'Element Successfully Popped',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n  }\r\n\r\n  addValueArr() {\r\n    const array=[];\r\n    var x=document.getElementById(\"val\").value;\r\n    if(this.state.abar===10)\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'error',\r\n      title: 'Buffer Overflow',\r\n      message: 'Only 10 elements allowed',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    else if(x==\"\")\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'warning',\r\n      title: 'No Input',\r\n      message: 'Provide some input please',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    for ( let i=0;i<this.state.abar;i++) {\r\n      array.push(this.state.array[i]);\r\n      console.log(array[i]);\r\n    }\r\n    array.push(parseInt(x));\r\n    this.state.abar=parseInt(this.state.abar)+parseInt(1);\r\n    this.setState({array});\r\n    console.log(this.state.abar);\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n    window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'success',\r\n      title: 'Task Successful',\r\n      message: 'Element Successfully Popped',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n  }\r\n\r\n  addValueUnsortedSet() {\r\n    const array=[];\r\n    var x=document.getElementById(\"val\").value;\r\n    if(this.state.abar===10)\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'error',\r\n      title: 'Buffer Overflow',\r\n      message: 'Only 10 elements allowed',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    else if(x==\"\")\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'warning',\r\n      title: 'No Input',\r\n      message: 'Provide some input please',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    for ( let i=0;i<this.state.abar;i++) {\r\n      array.push(this.state.array[i]);\r\n      console.log(array[i]);\r\n    }\r\n    if(array.includes(parseInt(x)))\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'info',\r\n      title: 'Exists',\r\n      message: 'The element already exist in the set',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    array.push(parseInt(x));\r\n    this.state.abar=parseInt(this.state.abar)+parseInt(1);\r\n    this.setState({array});\r\n    console.log(this.state.abar);\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n    window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'success',\r\n      title: 'Task Successful',\r\n      message: 'Element Successfully Popped',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n  }\r\n\r\n  addValueSortedSet() {\r\n    const array=[];\r\n    var x=document.getElementById(\"val\").value;\r\n    if(this.state.abar===10)\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'error',\r\n      title: 'Buffer Overflow',\r\n      message: 'Only 10 elements allowed',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    else if(x==\"\")\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'warning',\r\n      title: 'No Input',\r\n      message: 'Provide some input please',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    \r\n    for ( let i=0;i<this.state.abar;i++) {\r\n      array.push(this.state.array[i]);\r\n      console.log(array[i]);\r\n    }\r\n    if(array.includes(parseInt(x)))\r\n    {\r\n      window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'info',\r\n      title: 'Exists',\r\n      message: 'The element already exist in the set',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n      return;\r\n    }\r\n    array.push(parseInt(x));\r\n    array.sort(function(a, b){return a-b});\r\n    this.state.abar=parseInt(this.state.abar)+parseInt(1);\r\n    this.setState({array});\r\n    console.log(this.state.abar);\r\n    const arrayBar=document.getElementsByClassName('array-bar');\r\n    for ( let i=0;i<array.length;i++) {\r\n      if(!arrayBar[i])\r\n      {\r\n        continue;\r\n      }\r\n      else{\r\n      const boStyle = arrayBar[i].style;\r\n      boStyle.backgroundColor='rgb(12, 53, 71)';\r\n      boStyle.color='#e9e4e4';\r\n      }\r\n    }\r\n    window.notification = new Notification();\r\n      let instance = window.notification.new({\r\n      type: 'success',\r\n      title: 'Task Successful',\r\n      message: 'Element Successfully Popped',\r\n      duration: 2000,\r\n      position: 'top-right',\r\n      thickBorder: 'top',\r\n      iconless: false,\r\n      closable: false,\r\n      sticky: false,\r\n      closable: true,\r\n      });\r\n  }\r\n\r\n  addValue() {\r\n    if(this.refs.dsType.value===\"Array\")\r\n    {\r\n      this.addValueArr();\r\n    }\r\n    else if(this.refs.dsType.value===\"UnsortedSet\")\r\n    {\r\n      this.addValueUnsortedSet();\r\n    }\r\n    else if(this.refs.dsType.value===\"SortedSet\")\r\n    {\r\n      this.addValueSortedSet();\r\n    }\r\n  }\r\n\r\nrender() {\r\n  const {array} = this.state;\r\n\r\n  return (\r\n    <div>\r\n    <div>\r\n    <button onClick={()=>this.resetArray()}>Generate a new list</button>\r\n    <select ref=\"dsType\" onChange={()=>this.resetArray()}>\r\n    <option value=\"Array\">Array</option>\r\n    <option value=\"UnsortedSet\">Unsorted Set</option>\r\n    <option value=\"SortedSet\">Sorted Set</option>\r\n    </select>\r\n    <input type=\"number\" id=\"val\" name=\"val\"/>\r\n    <button onClick={()=>this.addValue()}>Add Value</button>\r\n    <input type=\"number\" id=\"dval\" name=\"dval\"/>\r\n    <button onClick={()=>this.deleteValue()}>Delete Value</button>\r\n    <button onClick={()=>this.pop()}>Pop</button>\r\n    <hr></hr>\r\n    </div>\r\n    <div className=\"array-container\">\r\n    {array.map((value, idx) => (\r\n      <div\r\n      className=\"array-bar\"\r\n      key={idx}><p>{value}</p></div>\r\n    ))}\r\n    </div>\r\n    <div className=\"arrangement\">\r\n    <hr></hr>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\n","D:\\Developer\\EduHUB\\datastructure-visualizer\\src\\DataStructuresVisualizer\\Notification.js",["69"],"'use strict';\n\n\nclass Notification {\n\n\n  /** @summary Create an instance of a notification handler\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build the notification singleton handler that will handle all incoming Notifications\n   * @param {object} [options] - The notification handler global options\n   * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>\n   * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>\n   * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*\n   * @param {number} [options.transition=100] - Notification fade animation transition timing (in ms) in range N*\n   * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */\n  constructor(options) {\n    if (!!Notification.instance) { // GoF Singleton\n      return Notification.instance;\n    }\n    Notification.instance = this;\n    // Attributes declaration\n    /** @private\n     * @member {boolean} - Dismiss all operation in progress flag */\n    this._dismissAllLock = false;\n    /** @private\n     * @member {object} - Notification handler container node */\n    this._dom = {};\n    /** @private\n     * @member {object} - Active notifications object : retrieve a notification using its ID (this._active[ID]) */\n    this._active = {};\n    /** @private\n     * @member {object} - Queue notifications when max active has been reached */\n    this._queue = {};\n    /** @private\n     * @member {object} - Notification handler default values */\n    this._default = {};\n    /** @private\n     * @member {string} - The handler position in viewport - <i>top-left; top-right; bottom-left; bottom-right;</i> */\n    this._position = '';\n    /** @private\n     * @member {string} - The thick border position in the Notification - <i>top; bottom; left; right; none;</i> */\n    this._thickBorder = '';\n    /** @private\n     * @member {number} - The Notification on screen duration in ms */\n    this._duration = 0;\n    /** @private\n     * @member {number} - The fade transition time in ms */\n    this._transition = 0;\n    /** @private\n     * @member {number} - The maximum amount of active Notification */\n    this._maxActive = 0;\n    /** @public\n     * @member {number} - The component version */\n    this.version = '1.1.0';\n    // Build singleton and attach\n    this._init(options);\n    // Return singleton\n    return this;\n  }\n\n\n  /** @method\n   * @name destroy\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Destroy the singleton and detach it from the DOM */\n  destroy() {\n    document.body.removeChild(this._dom);\n    // Delete object attributes\n    Object.keys(this).forEach(key => {\n      delete this[key];\n    });\n    // Clear singleton instance\n    Notification.instance = null;\n  }\n\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n  /*  ------------------------------  NOTIFICATION JS HANDLER CONSTRUCTION METHODS  --------------------------------  */\n  /*                                                                                                                  */\n  /*  The following methods only concerns the singleton creation. It handle all arguments and will fallback on        */\n  /*  default values if any argument doesn't meet its expected value or type.                                         */\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n\n  /** @method\n   * @name _init\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since July 2018\n   * @description Create the handler DOM element, set default values, test given options and properly add CSS class to the handler\n   * @param {object} [options] - The notification handler global options\n   * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>\n   * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>\n   * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*\n   * @param {number} [options.transition=100]  - Notification fade animation transition timing (in ms) in range N*\n   * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */\n  _init(options) {\n    // Declare options as object if empty\n    if (options === undefined) {\n      options = {};\n    }\n    // Create notification main container\n    this._dom = document.createElement('DIV'); // Notification handler DOM container\n    this._dom.classList.add('notification-container'); // Set proper CSS class\n    // Notification.js default values\n    this._default = {\n      handler: {\n        position: 'top-right',\n        thickBorder: 'top',\n        duration: 5000,\n        transition: 200,\n        maxActive: 10\n      },\n      notification: {\n        type: 'info',\n        message: '',\n        title: '',\n        iconless: false,\n        closable: true,\n        sticky: false,\n        renderTo: this._dom,\n        CBtitle: '',\n        callback: null,\n        isDimmed: false\n      },\n      color: {\n        success: 'rgb(76, 175, 80)',\n        info: 'rgb(3, 169, 244)',\n        warning: 'rgb(255, 152, 0)',\n        error: 'rgb(244, 67, 54)'\n      },\n      svgPath: {\n        success: 'M12.5 0C5.602 0 0 5.602 0 12.5S5.602 25 12.5 25 25 19.398 25 12.5 19.398 0 12.5 0zm-2.3 18.898l-5.5-5.5 1.8-1.796 3.7 3.699L18.5 7l1.8 1.8zm0 0',\n        info: 'M12.504.035a12.468 12.468 0 100 24.937 12.468 12.468 0 000-24.937zM15.1 19.359c-.643.25-1.153.445-1.537.576-.384.134-.825.199-1.333.199-.775 0-1.381-.192-1.813-.57a1.832 1.832 0 01-.642-1.442c0-.227.015-.459.047-.693.03-.24.083-.504.154-.806l.802-2.835c.069-.272.132-.527.182-.77.048-.244.069-.467.069-.668 0-.36-.075-.615-.223-.756-.153-.144-.437-.213-.857-.213-.207 0-.422.036-.639.095a9.914 9.914 0 00-.56.184l.213-.874a19.777 19.777 0 011.51-.549 4.48 4.48 0 011.361-.23c.77 0 1.368.19 1.784.56a1.857 1.857 0 01.626 1.452c0 .122-.012.341-.04.652a4.44 4.44 0 01-.162.856l-.798 2.831a8.133 8.133 0 00-.176.775c-.05.288-.075.51-.075.66 0 .374.082.633.251.771.165.134.458.202.875.202.192 0 .412-.037.66-.1.243-.073.42-.127.531-.18zm-.144-11.483a1.901 1.901 0 01-1.343.518 1.93 1.93 0 01-1.352-.518 1.65 1.65 0 01-.562-1.258 1.688 1.688 0 01.562-1.266 1.914 1.914 0 011.35-.522c.524 0 .975.173 1.345.523a1.673 1.673 0 01.56 1.266 1.65 1.65 0 01-.56 1.257z',\n        warning: 'M24.585 21.17L13.774 3.24a1.51 1.51 0 00-2.586 0L.376 21.17a1.51 1.51 0 001.293 2.29h21.623a1.51 1.51 0 001.292-2.29zM12.49 8.714c.621 0 1.146.35 1.146.97 0 1.895-.223 4.618-.223 6.513 0 .494-.541.7-.923.7-.51 0-.94-.208-.94-.701 0-1.894-.223-4.617-.223-6.511 0-.62.51-.971 1.163-.971zm.015 11.734a1.225 1.225 0 01-1.225-1.226c0-.669.525-1.227 1.225-1.227.652 0 1.21.558 1.21 1.227 0 .652-.557 1.225-1.21 1.225z',\n        error: 'M12.469.027c-3.332 0-6.465 1.301-8.824 3.653-4.86 4.86-4.86 12.777 0 17.636a12.392 12.392 0 008.824 3.653c3.336 0 6.465-1.301 8.824-3.653 4.863-4.859 4.863-12.777 0-17.636A12.417 12.417 0 0012.469.027zm5.61 18.086a1.137 1.137 0 01-.802.332c-.285 0-.582-.113-.8-.332l-4.008-4.008-4.008 4.008a1.137 1.137 0 01-.8.332c-.286 0-.583-.113-.802-.332a1.132 1.132 0 010-1.605l4.008-4.004L6.86 8.496a1.132 1.132 0 010-1.605 1.127 1.127 0 011.602 0l4.008 4.007 4.008-4.007a1.127 1.127 0 011.601 0c.45.449.45 1.164 0 1.605l-4.004 4.008 4.004 4.004c.45.449.45 1.164 0 1.605zm0 0'\n      }\n    };\n    // Build singleton from options and sanitize them\n    this._setOptionsDefault(options);\n    this._position = options.position;\n    this._thickBorder = options.thickBorder;\n    this._duration = options.duration;\n    this._transition = options.transition;\n    this._maxActive = options.maxActive;\n    this._setAttributesDefault();\n    // Add position CSS class only after this._position is sure to be a valid value\n    this._dom.classList.add(this._position);\n    this._attach();\n  }\n\n\n  /** @method\n   * @name _setOptionsDefault\n   * @private\n   * @memberof Notification\n   * @summary Set singleton options\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Build the notification singleton according to the user options\n   * @param {object} options - The singleton options to set */\n  _setOptionsDefault(options) {\n    if (options.position === undefined) {\n      options.position = this._default.handler.position;\n    }\n\n    if (options.thickBorder === undefined) {\n      options.thickBorder = this._default.handler.thickBorder;\n    }\n\n    if (options.duration === undefined) {\n      options.duration = this._default.handler.duration;\n    }\n\n    if (options.transition === undefined) {\n      options.transition = this._default.handler.transition;\n    }\n\n    if (options.maxActive === undefined) {\n      options.maxActive = this._default.handler.maxActive;\n    }\n  }\n\n\n  /** @method\n   * @name _setAttributesDefault\n   * @private\n   * @memberof Notification\n   * @summary Check the notification singleton options validity\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Fallback on default attributes value if the notification singleton options are invalid */\n  _setAttributesDefault() {\n    if (this._position !== 'top-left' && /* Illegal value for position */\n        this._position !== 'top-right' &&\n        this._position !== 'bottom-left' &&\n        this._position !== 'bottom-right') {\n      this._position = this._default.handler.position; // Default value\n    }\n\n    if (this._thickBorder !== 'top' && /* Illegal value for thick border */\n        this._thickBorder !== 'bottom' &&\n        this._thickBorder !== 'left' &&\n        this._thickBorder !== 'right' &&\n        this._thickBorder !== 'none') {\n      this._thickBorder = this._default.handler.thickBorder; // Default value\n    }\n\n    if (typeof this._duration !== 'number' || this._duration <= 0) { // Illegal value for duration\n      this._duration = this._default.handler.duration; // Default value\n    }\n\n    if (typeof this._transition !== 'number' || this._duration < (this._transition * 2) || this._transition <= 0) { // Transition over (duration / 2)\n      this._transition = this._default.handler.transition; // Default value for _maxActive\n    }\n\n    if (typeof this._maxActive !== 'number' || this._maxActive <= 0) { // Illegal value for maxActive\n      this._maxActive = this._default.handler.maxActive; // Default value for _maxActive\n    }\n  }\n\n\n  /** @method\n   * @name _attach\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since July 2018\n   * @description Attach the notification handler to the dom using a fragment */\n  _attach() {\n    const fragment = document.createDocumentFragment();\n    fragment.appendChild(this._dom);\n    document.body.appendChild(fragment);\n  }\n\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n  /*  -------------------------------------  NOTIFICATION SPECIFIC METHODS  ----------------------------------------  */\n  /*                                                                                                                  */\n  /*  The following methods implements notification features. It handle its events, lifecycle depending on its        */\n  /*  parameters, its DOM structure, and its animations. The Notification singleton will handle the notification      */\n  /*  stacking the in user interface.                                                                                 */\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n\n  /** @method\n   * @name _events\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Handle mouse events for the given notification\n   * @param {{id: number}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {number} notification.requestCount - Notification inner call counter\n   * @param {number} notification.timeoutID - Notification own setTimeout ID\n   * @param {boolean} notification.sticky - Notification sticky behvaior\n   * @param {boolean} notification.closable - Make notification closable flag */\n  _events(notification) {\n    let closeFired = false; // Close fired flag\n\n    // Inner callback functions\n    const _unDim = () => { // Undim notification\n      if (notification.isDimmed) {\n        this._unDim(notification);\n      }\n    };\n\n    const _close = () => { // Close notification\n      if (this._active[notification.id] === undefined) {\n        return;\n      }\n\n      // Update counter DOM element\n      if (notification.requestCount > 1) {\n        this._decrementRequestCounter(notification, true);\n      }\n\n      // Remove notification element from the DOM tree\n      else if (!closeFired) {\n        closeFired = true;\n        window.clearTimeout(notification.timeoutID); // Clear life cycle timeout\n        notification.dom.close.removeEventListener('click', _close); // Avoid error when spam clicking the close button\n        this._close(notification);\n      }\n    };\n\n    const _resetTimeout = () => { // Reset life cycle timeout\n      if (this._active[notification.id] === undefined) {\n        return;\n      }\n\n      if (!closeFired && !notification.isDimmed) { // Only reset timeout if no close event has been fired\n        this._resetTimeout(notification);\n      }\n    };\n\n    // Mouse event listeners\n    if (notification.sticky) {\n      notification.dom.addEventListener('mouseenter', _unDim.bind(this));\n      notification.dom.addEventListener('mouseout', _unDim.bind(this));\n    }\n\n    if (notification.closable) {\n      notification.dom.addEventListener('click', _close.bind(this));\n      notification.dom.close.addEventListener('click', _close.bind(this));\n    }\n\n    notification.dom.addEventListener('mouseover', _resetTimeout.bind(this));\n  }\n\n\n  /** @method\n   * @name _buildUI\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Builds the DOM element that contains and that adapts to all given options\n   * @param {object} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {string} notification.type - Error, Warning, Info, Success\n   * @param {string} notification.title - Notification title\n   * @param {string} notification.message - Notification message\n   * @param {boolean} notification.iconless - No icon flag\n   * @param {string} notification.thickBorder - Notification border side (override handler side value)\n   * @param {boolean} notification.closable - Make notification closable flag\n   * @param {boolean} notification.sticky - Make notification sticky flag\n   * @param {string} notification.CBtitle - Notification callback title\n   * @param {function} notification.callback - Notification callback button\n   * @returns {object} Enhanced and ready notification object */\n  _buildUI(notification) {\n    notification.requestCount = 1;\n    notification.totalRequestCount = 1;\n    this._buildUIDom(notification);\n    this._buildNotificationType(notification);\n\n    if (notification.iconless) {\n      notification.dom.message.classList.add('iconless-width');\n    }\n\n    notification.dom.text.appendChild(notification.dom.maintitle);\n    notification.dom.text.appendChild(notification.dom.message);\n    // Add callback button and listener if needed\n    if (notification.callback) {\n      const callbackButton = document.createElement('BUTTON');\n      callbackButton.innerHTML = notification.CBtitle;\n      notification.dom.text.appendChild(callbackButton);\n      callbackButton.addEventListener('click', () => {\n        this._close(notification);\n        notification.callback();\n      });\n    }\n    // Fill notification DOM element\n    if (!notification.iconless) {\n      notification.dom.appendChild(notification.dom.icon);\n    }\n\n    notification.dom.appendChild(notification.dom.text);\n    // Append close button if needed\n    if (notification.closable) {\n      notification.dom.appendChild(notification.dom.close);\n    }\n    // Return final notification\n    return notification;\n  }\n\n\n  /** @method\n   * @name _buildUIDom\n   * @private\n   * @memberof Notification\n   * @summary Create the Notification DOM tree\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Build all the Notification internal structure\n   * @param {object} notification - The notification to create */\n  _buildUIDom(notification) {\n    // Create notification DOM elements\n    notification.dom = document.createElement('DIV');\n    notification.dom.icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    notification.dom.iconPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    notification.dom.text = document.createElement('DIV');\n    notification.dom.close = document.createElement('DIV');\n    notification.dom.maintitle = document.createElement('H6');\n    notification.dom.message = document.createElement('P');\n    // Class assignation\n    notification.dom.classList.add('notification');\n    notification.dom.icon.classList.add('vector-container');\n    notification.dom.text.classList.add('text-container');\n    notification.dom.close.classList.add('close');\n    // Changing border side\n    if (notification.thickBorder === 'top') {\n      notification.dom.classList.add('top-border');\n    } else if (notification.thickBorder === 'bottom') {\n      notification.dom.classList.add('bottom-border');\n    } else if (notification.thickBorder === 'left') {\n      notification.dom.classList.add('left-border');\n    } else if (notification.thickBorder === 'right') {\n      notification.dom.classList.add('right-border');\n    }\n    // Text modification\n    notification.dom.maintitle.innerHTML = notification.title || '';\n    notification.dom.message.innerHTML = notification.message || '';\n    notification.dom.close.innerHTML = '&#x2716;';\n    // Image vector\n    notification.dom.icon.setAttribute('viewBox', '0 0 25 25');\n    notification.dom.icon.setAttribute('width', '25');\n    notification.dom.icon.setAttribute('height', '25');\n    notification.dom.icon.appendChild(notification.dom.iconPath);\n  }\n\n\n  /** @method\n   * @name _buildNotificationType\n   * @private\n   * @memberof Notification\n   * @summary Attach proper assets and css\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Fills the Notification icon and class according to its inner type\n   * @param {object} notification - The notification to fill */\n  _buildNotificationType(notification) {\n    // Type specification (title, icon, color)\n    if (['success', 'warning', 'error', 'info'].indexOf(notification.type) !== -1){\n      notification.dom.classList.add(notification.type);\n\n      if (!notification.iconless) {\n        notification.dom.iconPath.setAttribute('fill', this._default.color[notification.type]);\n        notification.dom.iconPath.setAttribute('d', this._default.svgPath[notification.type]);\n      }\n    } else {\n      notification.dom.classList.add('info');\n\n      if (!notification.iconless) {\n        notification.dom.iconPath.setAttribute('fill', this._default.color.info);\n        notification.dom.iconPath.setAttribute('d', this._default.svgPath.info);\n      }\n    }\n  }\n\n\n  /** @method\n   * @name _start\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Call this method to add the new notification to the DOM container, and launch its life cycle\n   * @param {object} notification - The notification object\n   * @param {number} notification.id - Notification own ID */\n  _start(notification) {\n    if (Object.keys(this._active).length >= this._maxActive) {\n      this._queue[notification.id] = notification;\n    } else {\n      this._active[notification.id] = notification; // Append the new notification to the _active object\n\n      this._events(notification); // Listen to mouse events on the newly created notification\n      this._open(notification); // Open the new notification\n\n      notification.timeoutID = window.setTimeout(() => {\n        this._checkCounter(notification); // Check notification request count to act accordingly\n      }, notification.duration); // Use Notification master duration\n    }\n  }\n\n\n  /** @method\n   * @name _open\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Open and add the notification to the container\n   * @param {{id: number}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {object} notification.dom - Notifiction DOM element */\n  _open(notification) {\n    // Reverse insertion when notifications are on bottom\n    if (this._position === 'bottom-right' || this._position === 'bottom-left') {\n      notification.renderTo.insertBefore(notification.dom, notification.renderTo.firstChild);\n    } else {\n      notification.renderTo.appendChild(notification.dom);\n    }\n\n    notification.opened = Date.now();\n    window.setTimeout(() => {\n      notification.dom.style.opacity = 1;\n    }, 10);\n  }\n\n\n  /** @method\n   * @name _close\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Close and remove the notification from the container\n   * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {boolean} notification.isClosing - Already closing flag\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {object} notification.renderTo - DOM object to render the notification in */\n  _close(notification) {\n    if (notification.isClosing) { // Avoid double close on a notification (in case dismiss/dismissAll is triggerred when notification is already closing)\n      return;\n    }\n\n    notification.isClosing = true; // Lock notification to one fadeOut animation\n    notification.closed = Date.now();\n    notification.effectiveDuration = notification.closed - notification.opened;\n    notification.dom.style.opacity = 0;\n    window.setTimeout(() => {\n      notification.renderTo.removeChild(notification.dom); // Remove this notification from the DOM tree\n      delete this._active[notification.id];\n\n      if (Object.keys(this._queue).length > 0) { // Notification queue is not empty\n        this._start(this._queue[Object.keys(this._queue)[0]]); // Start first queued notification\n        delete this._queue[Object.keys(this._queue)[0]]; // Shift queue object\n      } else if (Object.keys(this._active).length === 0) { // Check this._active emptyness\n        this._dismissAllLock = false; // Unlock dismissAllLock\n      }\n    }, 1000); // Transition value set in _notification.scss\n  }\n\n\n  /** @method\n   * @name _incrementRequestCounter\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description This method is called when a notification is requested another time\n   * @param {object} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {number} notification.requestCount - Notification inner call counter\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {boolean} notification.sticky - Notification sticky behvaior\n   * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  _incrementRequestCounter(notification) {\n    ++notification.requestCount; // Increment notification.requestCount\n\n    if (notification.totalRequestCount < notification.requestCount) {\n      notification.totalRequestCount = notification.requestCount;\n    }\n\n    // Update counter DOM element\n    if (notification.requestCount > 1) {\n      let valueToDisplay = '∞';\n      if (notification.requestCount < 100) {\n        valueToDisplay = notification.requestCount;\n      }\n\n      if (notification.dom.counter) { // Update existing counter\n        notification.dom.counter.innerHTML = valueToDisplay;\n      } else { // Create counter DOM element\n        notification.dom.counter = document.createElement('DIV');\n        notification.dom.counter.classList.add('counter');\n        notification.dom.counter.innerHTML = valueToDisplay;\n        notification.dom.appendChild(notification.dom.counter);\n      }\n    }\n\n    // Undim notification if it is a sticky/dimmed one\n    if (notification.sticky && notification.isDimmed) {\n      this._unDim(notification);\n    }\n  }\n\n\n  /** @method\n   * @name _decrementRequestCounter\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description This method is called each notification cycle end to update its inner counter\n   * @param {{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {boolean} notification.sticky - Notification sticky behvaior\n   * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true)\n   * @param {number} notification.requestCount - Notification inner call counter\n   * @param {object} notification.dom - Notification DOM element\n   * @param {boolean} force - To force the notification.requestCount decrementation */\n  _decrementRequestCounter(notification, force) {\n    if (notification.sticky && !force) {\n      if (!notification.isDimmed) {\n        this._dim(notification);\n      }\n\n      return;\n    }\n\n    this._resetTimeout(notification);\n    --notification.requestCount; // Decrement notification.requestCount\n\n    // Update counter DOM element\n    if (notification.requestCount > 1) {\n      let valueToDisplay = '∞';\n      if (notification.requestCount < 100) {\n        valueToDisplay = notification.requestCount;\n      }\n\n      notification.dom.counter.innerHTML = valueToDisplay;\n    } else { // Remove counter element from the DOM tree\n      notification.dom.removeChild(notification.dom.counter);\n      delete notification.dom.counter;\n    }\n  }\n\n\n  /** @method\n   * @name _checkCounter\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description This method will reset the fadeout/dim timeout or close/dim the notification depending on its requestCount\n   * @param {{id: number}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {number} notification.requestCount - Notification inner call counter\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {number} notification.timeoutID - Notification own setTimeout ID\n   * @param {boolean} notification.sticky - Notification sticky behvaior */\n  _checkCounter(notification) {\n    // This notification as still more than one cycle to live\n    if (notification.requestCount > 1) {\n      this._decrementRequestCounter(notification);\n    } else { // This notification reached the end of its life cycle\n      if (notification.renderTo.contains(notification.dom)) {\n        window.clearTimeout(notification.timeoutID);\n        if (notification.sticky) { // FadeOut/Dim depending on sticky behavior\n          this._dim(notification);\n        } else {\n          this._close(notification);\n        }\n      }\n    }\n  }\n\n\n  /** @method\n   * @name _clearRequestCount\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Method that clear every pending request\n   * @param {object} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {object} notification.dom - Notifiction DOM element */\n  _clearRequestCount(notification) {\n    notification.requestCount = 1;\n    notification.dom.removeChild(notification.dom.counter);\n    delete notification.dom.counter;\n  }\n\n\n  /** @method\n   * @name _resetTimeout\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Use this to reset a notification life cycle, and delay its close event\n   * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {number} notification.timeoutID - Notification own setTimeout ID */\n  _resetTimeout(notification) {\n    window.clearTimeout(notification.timeoutID); // Clear previous life cycle\n    notification.timeoutID = window.setTimeout(() => {\n      this._checkCounter(notification); // Check notification request count to act accordingly\n    }, notification.duration); // Use Notification master duration\n  }\n\n\n  /** @method\n   * @name _dim\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Only useful for sticky notification that dim instead of close at the end of its life cycle\n   * @param {{id: number, requestCount: number, dom: Object, timeoutID: number, sticky: boolean}} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {boolean} notification.sticky - Notification sticky behvaior\n   * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  _dim(notification) {\n    const that = this;\n    let i = 100;\n    (function halfFadeOut() { // Start animation immediatly\n      if (i >= 0) {\n        notification.dom.style.opacity = i / 100;\n        --i;\n\n        if (i === 50 && notification.sticky) { // Opacity has reached 0.51\n          notification.dom.style.opacity = 0.5; // Set half transparency on notification\n          notification.isDimmed = true; // Update notification dim status\n          return; // End function\n        }\n      }\n\n      window.setTimeout(halfFadeOut, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)\n    })();\n  }\n\n\n  /** @method\n   * @name _unDim\n   * @private\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Call this method when a notification is not inactive anymore\n   * @param {object} notification - The notification object\n   * @param {number} notification.id - Notification personnal ID\n   * @param {object} notification.dom - Notifiction DOM element\n   * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  _unDim(notification) {\n    const that = this;\n    let i = 50;\n    (function halfFadeIn() {\n      if (i < 100) {\n        notification.dom.style.opacity = i / 100;\n        ++i;\n      } else if (i === 100) {\n        notification.dom.style.opacity = 1; // Set full visibility on notification\n        notification.isDimmed = false; // Update notification dim status\n        that._resetTimeout(notification); // Reset life cycle timeout\n        return; // End function\n      }\n\n      window.setTimeout(halfFadeIn, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)\n    })();\n  }\n\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n  /*  -----------------------------  SINGLE NOTIFICATION CONSTRUCTION UTILS METHODS  -------------------------------  */\n  /*                                                                                                                  */\n  /*  The following methods only concerns a new notification request. It will test the options validity, default to   */\n  /*  fallback value if necessary and give the notification a pseudo unique identifier.                               */\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n\n  /** @method\n   * @name _checkNotificationOptionsValidity\n   * @private\n   * @memberof Notification\n   * @summary Check the Notification options validity\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Check a Notification options object against the required parameters.\n   * @param {object} options - The notification options to check validity */\n  _checkNotificationOptionsValidity(options) {\n    // Check for mandatory arguments existence\n    if (options === undefined || (options.type === undefined || options.message === undefined)) {\n      return false;\n    }\n    // Check existing message\n    if (typeof options.message !== 'string' || options.message.length === 0) {\n      return false;\n    }\n    // Check for unclosable at all notification\n    if (options.sticky && options.closable === false) {\n      return false;\n    }\n    // Test Notification inner variables validity\n    if (options.type !== 'info' && options.type !== 'success' && options.type !== 'warning' && options.type !== 'error') {\n      options.type = this._default.notification.type;\n    }\n    // Unlock dismissAllLock\n    if (this._dismissAllLock) {\n      this._dismissAllLock = false;\n    }\n\n    return true;\n  }\n\n\n  /** @method\n   * @name _setOptionsFallback\n   * @private\n   * @memberof Notification\n   * @summary Set Notification fallback options\n   * @author Arthur Beaulieu\n   * @since March 2019\n   * @description Check a Notification options object and fill it with default value in case they are empty.\n   * @param {object} options - The notification options to fill with default value if empty */\n  _setOptionsFallback(options) {\n    if (options.title === undefined) {\n      options.title = this._default.notification.title;\n    }\n\n    if (options.duration === undefined) {\n      options.duration = this._duration;\n    }\n\n    if (options.iconless === undefined) {\n      options.iconless = this._default.notification.iconless;\n    }\n\n    if (options.thickBorder === undefined) {\n      options.thickBorder = this._thickBorder;\n    }\n\n    if (options.closable === undefined) {\n      options.closable = this._default.notification.closable;\n    }\n\n    if (options.sticky === undefined) {\n      options.sticky= this._default.notification.sticky;\n    }\n\n    if (options.renderTo === undefined) {\n      options.renderTo = this._default.notification.renderTo;\n    }\n\n    if (options.CBtitle === undefined) {\n      options.CBtitle = this._default.notification.CBtitle;\n    }\n\n    if (options.callback === undefined) {\n      options.callback = this._default.notification.callback;\n    }\n\n    if (options.isDimmed === undefined) {\n      options.isDimmed = this._default.notification.isDimmed;\n    }\n  }\n\n\n  /** @method\n   * @name _idGenerator\n   * @private\n   * @memberof Notification\n   * @summary Generate an ID\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Hash the seed to generate an ID\n   * @param {string} seed   - The seed string to hash\n   * @param {number} length - The length of the returned ID */\n  _idGenerator(seed, length) {\n    /* Original code from:\n     * http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n     * Tweaked to fit Notification class needs\n     */\n    let hash = 0;\n    let character = '';\n\n    if (seed.length === 0 || length > 12) { return undefined; }\n\n    for (let i = 0; i < seed.length; ++i) {\n      character = seed.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + character;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return (Math.abs(hash).toString(36) + '' + Math.abs(hash / 2).toString(36).split('').reverse().join('')).substring(0, length).toUpperCase(); // Here is the twekead line\n  }\n\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n  /*  --------------------------------------  NOTIFICATION PUBLIC METHODS  -----------------------------------------  */\n  /*                                                                                                                  */\n  /*  The following methods are the exposed API of the Notification component. It allow to raise standard or custom   */\n  /*  notification without bothering their lifecycle, position or other JavaScript expensive implementation.          */\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n\n  /** @method\n   * @name new\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build a notification according to the given options, then append it to notification container.\n   * @param {object} options - The notification options object\n   * @param {string} options.type - <i>Error; Warning; Info; Success;</i>\n   * @param {string} [options.title=options.type] - Notification title\n   * @param {string} options.message - Notification message\n   * @param {number} [options.duration=handler] - Notification duration (override handler duration value)\n   * @param {boolean} [options.iconless=false] - No icon flag\n   * @param {string} [options.thickBorder=handler] - Notification border side (override handler side value)\n   * @param {boolean} [options.closable=true] - Make notification closable flag\n   * @param {boolean} [options.sticky=false] - Make notification sticky flag\n   * @param {object} [options.renderTo=handler] - Dom object to render the notification in\n   * @param {string} [options.CBtitle=Callback] - Notification callback title\n   * @param {function} [options.callback=undefined] - Notification callback button\n   * @returns {number} The newly created notification ID */\n  new(options) {\n    if (this._checkNotificationOptionsValidity(options) === false) {\n      console.error('Notification.js : new() options argument object is invalid.');\n      return -1;\n    }\n\n    this._setOptionsFallback(options);\n    // Build notification DOM element according to the given options\n    let notification = this._buildUI({\n      id: this._idGenerator(`${options.type}${options.message}`, 5), // Generating an ID of 5 characters long from notification mandatory fields\n      type: options.type,\n      message: options.message,\n      title: options.title,\n      duration: options.duration,\n      iconless: options.iconless,\n      thickBorder: options.thickBorder,\n      closable: options.closable,\n      sticky: options.sticky,\n      renderTo: options.renderTo,\n      CBtitle: options.CBtitle,\n      callback: options.callback,\n      isDimmed: options.isDimmed // Only useful if sticky is set to true\n    });\n    // Create a new notification in the container: No notification with the same ID is already open\n    if (!this._active[notification.id]) {\n      this._start(notification);\n    } else { // Use existing notification: increment request count and reset timeout\n      this._resetTimeout(this._active[notification.id]);\n      this._incrementRequestCounter(this._active[notification.id]);\n      notification = this._active[notification.id]; // Clear local new notification since it already exists in this._active\n    }\n\n    return notification.id;\n  }\n\n\n  /** @method\n   * @name info\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build an info notification\n   * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\n   * @returns {number} The newly created notification ID */\n  info(options) {\n    if (options) {\n      options.type = 'info';\n      return this.new(options);\n    } else {\n      console.error('Notification.js : No arguments provided for info() method.');\n    }\n  }\n\n\n  /** @method\n   * @name success\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build a success notification\n   * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\n   * @returns {number} The newly created notification ID */\n  success(options) {\n    if (options) {\n      options.type = 'success';\n      return this.new(options);\n    } else {\n      console.error('Notification.js : No arguments provided for success() method.');\n    }\n  }\n\n\n  /** @method\n   * @name warning\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build a warning notification\n   * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\n   * @returns {number} The newly created notification ID */\n  warning(options) {\n    if (options) {\n      options.type = 'warning';\n      return this.new(options);\n    } else {\n      console.error('Notification.js : No arguments provided for warning() method.');\n    }\n  }\n\n\n  /** @method\n   * @name error\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Build an error notification\n   * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\n   * @returns {number} The newly created notification ID */\n  error(options) {\n    if (options) {\n      options.type = 'error';\n      return this.new(options);\n    } else {\n      console.error('Notification.js : No arguments provided for error() method.');\n    }\n  }\n\n\n  /** @method\n   * @name dismiss\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Dismiss a specific notification via its ID\n   * @param {string} id - The notification ID to dismiss */\n  dismiss(id) {\n    window.clearTimeout(this._active[id].timeoutID); // Clear notification timeout\n\n    if (this._active[id].requestCount > 1) { // Several request are pending\n      this._clearRequestCount(this._active[id]); // Clear all pending request\n    }\n\n    this._close(this._active[id]); // Close notification\n  }\n\n\n  /** @method\n   * @name dismissAll\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Clear the notification handler from all its active notifications */\n  dismissAll() {\n    if (!this._dismissAllLock && Object.keys(this._active).length !== 0) { // Check that _dimissAllLock is disable and that there is still notification displayed\n      this._dismissAllLock = true; // dismissAllLock will be unlocked at the last _close() method call\n      this._queue = {}; // Clear queue object\n\n      for (const id in this._active) { // Iterate over notifications\n        this.dismiss(id);\n      }\n    }\n  }\n\n\n  /** @method\n   * @name dismissType\n   * @public\n   * @memberof Notification\n   * @author Arthur Beaulieu\n   * @since June 2018\n   * @description Dismiss all notifications from a given type\n   * @param {string} type - <i>succes; info; warning; error;</i> */\n  dismissType(type) {\n    if (Object.keys(this._active).length !== 0) { // Check that _dismissAllLock is disable and that there is still notification displayed\n      for (const id in this._active) { // Iterate over notifications\n        if (this._active[id].type === type) {\n          this.dismiss(id);\n        }\n      }\n    }\n  }\n\n\n}\n\n\nexport default Notification;\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":22,"column":5,"nodeType":"80","endLine":22,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":66,"column":11,"nodeType":"76","messageId":"77","endLine":66,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":76,"column":7,"nodeType":"84","messageId":"85","endLine":76,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":83,"column":11,"nodeType":"76","messageId":"77","endLine":83,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":93,"column":7,"nodeType":"84","messageId":"85","endLine":93,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":100,"column":11,"nodeType":"76","messageId":"77","endLine":100,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":110,"column":7,"nodeType":"84","messageId":"85","endLine":110,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":122,"column":5,"nodeType":"80","endLine":122,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":144,"column":11,"nodeType":"76","messageId":"77","endLine":144,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":154,"column":7,"nodeType":"84","messageId":"85","endLine":154,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":162,"column":5,"nodeType":"80","endLine":162,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":179,"column":11,"nodeType":"76","messageId":"77","endLine":179,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":189,"column":7,"nodeType":"84","messageId":"85","endLine":189,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":199,"column":11,"nodeType":"76","messageId":"77","endLine":199,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":209,"column":7,"nodeType":"84","messageId":"85","endLine":209,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":213,"column":14,"nodeType":"88","messageId":"85","endLine":213,"endColumn":16},{"ruleId":"74","severity":1,"message":"81","line":216,"column":11,"nodeType":"76","messageId":"77","endLine":216,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":226,"column":7,"nodeType":"84","messageId":"85","endLine":226,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":235,"column":5,"nodeType":"80","endLine":235,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":251,"column":11,"nodeType":"76","messageId":"77","endLine":251,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":261,"column":7,"nodeType":"84","messageId":"85","endLine":261,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":271,"column":11,"nodeType":"76","messageId":"77","endLine":271,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":281,"column":7,"nodeType":"84","messageId":"85","endLine":281,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":285,"column":14,"nodeType":"88","messageId":"85","endLine":285,"endColumn":16},{"ruleId":"74","severity":1,"message":"81","line":288,"column":11,"nodeType":"76","messageId":"77","endLine":288,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":298,"column":7,"nodeType":"84","messageId":"85","endLine":298,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":309,"column":11,"nodeType":"76","messageId":"77","endLine":309,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":319,"column":7,"nodeType":"84","messageId":"85","endLine":319,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":324,"column":5,"nodeType":"80","endLine":324,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":340,"column":11,"nodeType":"76","messageId":"77","endLine":340,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":350,"column":7,"nodeType":"84","messageId":"85","endLine":350,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":360,"column":11,"nodeType":"76","messageId":"77","endLine":360,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":370,"column":7,"nodeType":"84","messageId":"85","endLine":370,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":374,"column":14,"nodeType":"88","messageId":"85","endLine":374,"endColumn":16},{"ruleId":"74","severity":1,"message":"81","line":377,"column":11,"nodeType":"76","messageId":"77","endLine":377,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":387,"column":7,"nodeType":"84","messageId":"85","endLine":387,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":399,"column":11,"nodeType":"76","messageId":"77","endLine":399,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":409,"column":7,"nodeType":"84","messageId":"85","endLine":409,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":415,"column":5,"nodeType":"80","endLine":415,"endColumn":15},{"ruleId":"74","severity":1,"message":"81","line":431,"column":11,"nodeType":"76","messageId":"77","endLine":431,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":441,"column":7,"nodeType":"84","messageId":"85","endLine":441,"endColumn":15},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","endLine":1,"endColumn":14,"fix":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'instance' is assigned a value but never used.","no-dupe-keys","Duplicate key 'closable'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"96","text":"97"},"no-global-assign","no-unsafe-negation",[0,13],""]